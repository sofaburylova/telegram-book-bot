import logging
import sqlite3
import random
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ---
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_CHAT_ID = os.getenv('CHANNEL_CHAT_ID')

if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not CHANNEL_CHAT_ID:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω CHANNEL_CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

try:
    CHANNEL_CHAT_ID = int(CHANNEL_CHAT_ID)
except ValueError:
    raise ValueError("‚ùå CHANNEL_CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞. Chat ID: {CHANNEL_CHAT_ID}")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def init_db():
    conn = sqlite3.connect('channel_posts.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS posts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            message_id INTEGER NOT NULL,
            hashtags TEXT,
            title TEXT,
            category TEXT
        )
    ''')
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

def add_post_to_db(message_id, hashtags, title, category):
    conn = sqlite3.connect('channel_posts.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM posts WHERE message_id = ?', (message_id,))
    if cursor.fetchone() is None:
        cursor.execute('''
            INSERT INTO posts (message_id, hashtags, title, category)
            VALUES (?, ?, ?, ?)
        ''', (message_id, hashtags, title, category))
        conn.commit()
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î: {category} - {title} (ID: {message_id})")
    conn.close()

def get_random_post(category):
    conn = sqlite3.connect('channel_posts.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT message_id, title FROM posts 
        WHERE category = ? 
        ORDER BY RANDOM() 
        LIMIT 1
    ''', (category,))
    result = cursor.fetchone()
    conn.close()
    return result

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üé¨ –§–∏–ª—å–º", callback_data='category_—Ñ–∏–ª—å–º—ã')],
        [InlineKeyboardButton("üì∫ –°–µ—Ä–∏–∞–ª", callback_data='category_—Å–µ—Ä–∏–∞–ª—ã')],
        [InlineKeyboardButton("üìö –ö–Ω–∏–≥–∞", callback_data='category_–∫–Ω–∏–≥–∏')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å, —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –ø–æ—á–∏—Ç–∞—Ç—å. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    category = query.data.split('_')[1]
    random_post = get_random_post(category)
    
    if random_post:
        message_id, title = random_post
        channel_link = f"https://t.me/c/{str(CHANNEL_CHAT_ID)[4:]}/{message_id}"
        await query.edit_message_text(
            text=f"<b>üéâ –í–∞—à–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b>\n\n<a href='{channel_link}'>{title}</a>",
            parse_mode='HTML'
        )
    else:
        await query.edit_message_text(
            text=f"üòî –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manual –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π!"
        )

async def debug_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('channel_posts.db')
    cursor = conn.cursor()
    cursor.execute("SELECT category, COUNT(*) FROM posts GROUP BY category")
    results = cursor.fetchall()
    total = sum(count for _, count in results)
    if results:
        message = f"üìä –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ –≤ –ë–î: {total}\n" + "\n".join([f"‚Ä¢ {cat}: {count}" for cat, count in results])
    else:
        message = "üìä –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manual –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"
    conn.close()
    await update.message.reply_text(message)

async def manual_add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìù –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤—Ä—É—á–Ω—É—é:\n\n"
        "1. –ù–∞–π–¥–∏ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ\n"
        "2. –ò–∑ —Å—Å—ã–ª–∫–∏ –≤–æ–∑—å–º–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ)\n"
        "3. –ü—Ä–∏—à–ª–∏ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/add ID #–∫–∞—Ç–µ–≥–æ—Ä–∏—è –ù–∞–∑–≤–∞–Ω–∏–µ</code>\n\n"
        "üîπ –ü—Ä–∏–º–µ—Ä—ã:\n"
        "<code>/add 123 #–∫–Ω–∏–≥–∏ –ú–µ–∂–¥—É –Ω–∞–º–∏ –≥–æ—Ä—ã</code>\n"
        "<code>/add 456 #—Ñ–∏–ª—å–º—ã –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∏–ª—å–º</code>",
        parse_mode='HTML'
    )

async def add_post_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args or len(context.args) < 3:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "<code>/add ID #–∫–∞—Ç–µ–≥–æ—Ä–∏—è –ù–∞–∑–≤–∞–Ω–∏–µ</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>/add 123 #–∫–Ω–∏–≥–∏ –ú–µ–∂–¥—É –Ω–∞–º–∏ –≥–æ—Ä—ã</code>",
            parse_mode='HTML'
        )
        return
    try:
        message_id = int(context.args[0])
        category_hashtag = context.args[1].lower()
        title = ' '.join(context.args[2:])
        if category_hashtag == '#–∫–Ω–∏–≥–∏':
            category = '–∫–Ω–∏–≥–∏'
        elif category_hashtag == '#—Ñ–∏–ª—å–º—ã':
            category = '—Ñ–∏–ª—å–º—ã'
        elif category_hashtag == '#—Å–µ—Ä–∏–∞–ª—ã':
            category = '—Å–µ—Ä–∏–∞–ª—ã'
        else:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ #–∫–Ω–∏–≥–∏, #—Ñ–∏–ª—å–º—ã –∏–ª–∏ #—Å–µ—Ä–∏–∞–ª—ã")
            return
        add_post_to_db(message_id, category_hashtag, title, category)
        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {category} - {title}\nID: {message_id}")
    except ValueError:
        await update.message.reply_text("‚ùå ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

def main():
    print("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    init_db()
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("debug", debug_command))
    application.add_handler(CommandHandler("manual", manual_add_command))
    application.add_handler(CommandHandler("add", add_post_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    application.run_polling()

if __name__ == '__main__':
    main()